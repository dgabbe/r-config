# Rprofile.site
#
# .Rprofile is the file users should create/edit for their own
# preferences.
#

# ===========================================================
#
#     REMINDER: This code is sourced into the base environment.
#     Be sure not to overwrite any R funtions, etc.
#
# ===========================================================

# Notes:
#   After using the 'defaultPackage' option for a year, I decided not to use
#   this option to load my commonly used libraries.  A vanilla R startup includes
#   these packages "datasets", "utils", "grDevices", "graphics", "stats", and "methods".
#   These need to be included if you add some of your own.  The idiom defaultPackages =
#   c(getOption("defaultPackages"), "your package") assumes the code is only
#   executed once which is not guaranteed.  RStudio executing the devtools functions cause
#   the R session initialization code to run.  "your package" is appended again to the
#   default package list (and callbacks are added again to the task callback manager).
#   While R only attaches the package once, it's still sloppy code.
#
#   Use require() instead of library() because initialization code should never
#   fail due to personal preference.
#
# References: http://yihui.name/en/2014/07/library-vs-require/
#
.First <- function() {
  message_prefix <- paste(
    format(Sys.Date(), format = "%d-%b-%Y"),
    " ", Sys.getenv("R_PROFILE")
  )
  if (interactive()) { message(message_prefix, " .First() starting...\n") }

  #
  # General options
  #
  options(
    tab.width = 2,
    digits = 4,
    papersize = "letter",
    stringsAsFactors = FALSE, # Correct for now, wonder if/when it will bite me.
    repos = c(CRAN = "https://cran.rstudio.com/"), # Specify HTTPS connection!
    formatR.indent = 2,
    browserNLdisabled = TRUE, # ignore newlines when browse()ing - Hadley tip
    ##  deparse.max.lines = 2 # give minimal output from traceback() - Hadley tip
    tibble.width = Inf, # Give it try
    shiny.launch.browser = TRUE,
    shiny.autoreload = TRUE,
    shiny.autoreload.interval = 2000 # in milliseconds
  )

  #
  # R and RStudio can have different settings for CRAN https connections.
  # Explicitly set to HTTPS.
  #
  # References:
  #  https://support.rstudio.com/hc/en-us/articles/206827897-Secure-Package-Downloads-for-R
  #
  if (.Platform$OS.type == "unix") {
    options(download.file.method = "libcurl")
  } else {
    options(download.file.method = "wininet")
  }

  #
  # R's completion generator
  #
  utils::rc.settings(
    ipck = TRUE,   # Enable tab completion for library() & require()
    help = TRUE,   # Enable tab completion for ?help
    data = TRUE    # Enable tab completion for data sets inside utils::data()
  )

  if (interactive()) {
    #
    # Load commonly used packages
    #
    suppressWarnings(
      suppressMessages({
        require("devtools", quietly = TRUE)
        require("usethis", quietly = TRUE) # must load after devtools
        require("dgutils", quietly = TRUE) # should load last
      })
    )
    #
    # wdprompt::stop_wd() if you want to turn off the prompt.
    #
    if (length(find.package("wdprompt", quiet = TRUE)) > 0 ) {
      wdprompt::start_wd()
    }

    #
    # Options summary
    #
    lapply(
      list(
        "defaultPackages", "download.file.method", "repos",
        "shiny.autoreload", "shiny.autoreload.interval", "shiny.launch.browser",
        "stringsAsFactors", "tibble.width"
      ),
      function(o) {
        message(
          strwrap(
            toString(getOption(o)),
            width = 80,
            initial = paste("    Option ", o, ":  ", sep = ""),
            prefix = "\n",
            indent = 0,
            exdent = nchar("        ")
          )
        )
      }
    )

    message("\n", message_prefix, " .First() finished...\n")
  }
} # .First


