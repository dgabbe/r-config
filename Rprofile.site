# The Rprofile.site file
#
# This file creates a basic environment that R programming can run in
# and be consistent across users.
#
# The .Rprofile file is the file users should create/edit for their own
# preferences.
#
#
# History:
#   03-06-2015: Created by David Gabbe

if (interactive())
{
  cat(format(Sys.Date(), format = "%d-%b-%Y"),
    " Rprofile.site: ", Sys.getenv("R_PROFILE"), " starting...\n\n"
  )
}

#
# General options
#
options(tab.width = 2)
options(digits=4)
options(papersize="letter")
options(stringsAsFactors=FALSE) # Correct for now, wonder if/when it will bite me.

#
# Emulate bash command line prompt behavior in R console.  RStudio does display
# the current working directory in the Console window title bar, but it is not
# where I reflexively look.
#
# References:
#     http://stackoverflow.com/questions/4222476/r-display-a-time-clock-in-the-r-command-line
#     http://stackoverflow.com/questions/25136059/how-to-show-working-directory-in-r-prompt
#

working_dir_prompt <- function(...) {
  # There are no arguments because the callback task manager doesn't allow for
  # optional function arguments. Since you need to add a callback if you want to
  # change the behavior, it's no different than changing the variables below.
  #
  # Set the prompt to display the current working directory according to personal perferences.
  fullPath <- TRUE
  promptLen <- c(15)

  curDir <- getwd()
  if (fullPath) {
    # Mirror the behavior by my bash prompt.
    options(prompt = paste(curDir, ">\n"))
  } else {
    if (nchar(curDir) <= promptLen) {
      options(prompt = paste(curDir,"> "))
    } else {
      options(prompt = paste("...", substring(curDir, nchar(curDir) - 15), "> "))
    }
  }
  TRUE
}

#
# The code for the task callback is a copy of the function.  The global
# environment can be cleared and the prompt behavior continues to work.
#
# If you don't like how this work, it can be removed by:
#   1. getTaskCallbackNames()
#   2. Get the Task ID number that matches "working_dir_prompt"
#   3. removeTaskCallback([id])
#   4. options(prompt=paste("your string here"))
#
sink("/dev/null") # suppress output
  addTaskCallback(working_dir_prompt, data=NULL, name="working_dir_prompt")
sink()

cd <- setwd
pwd <- getwd


if (interactive()) {
  cat(format(Sys.Date(), format = "%d-%b-%Y"),
    " Rprofile.site: ", Sys.getenv("R_PROFILE"), " loaded...\n\n"
  )
  working_dir_prompt() # Force a top level task to invoke callback
}

