# The Rprofile.site file
#
# This file creates a basic environment that R programming can run in
# and be consistent across users.
#
# The .Rprofile file is the file users should create/edit for their own
# setting.
#
#
# History:
#   03-06-2015: Created by David Gabbe

if (interactive())
{
  cat("\n", format(Sys.Date(), format = "%d-%b-%Y"),
    " Rprofile.site: ", Sys.getenv("R_PROFILE"), " starting...\n\n"
  )
}

#
# Set the options
#
# General options
options(tab.width = 2)
options(digits=4)
options(papersize="letter")

DGPrompt <- function() {
  # Set the prompt to be the current working directory w/command starting underneath on a new line to mirror the behavior by my bash prompt.
  options(prompt=paste(getwd(), ">\n"))
}


DGTruncPrompt <- function() {
  # Set the prompt to be a truncated display of the current working directory.
  promptLen <- c(15)
  curDir <- getwd()
  if (nchar(curDir) <= promptLen) {
    options(prompt=paste(curDir,"> "))
  } else {
    options(prompt=paste("...", substring(curDir, nchar(curDir)-15), "> "))
  }
}


cd <- function(...) {
  #
  # R can be run in a couple of different ways so it's possible to end up
  # in a directory you hadn't expected.
  #
  # Helpful info from: http://stackoverflow.com/questions/25136059/how-to-show-working-directory-in-r-prompt
  #
  base::setwd(...)
  DGPrompt()
}

pwd <- function(...) {
  #
  # R can be run in a couple of different ways so it's possible to end up
  # in a directory you hadn't expected.
  #
  # Helpful info from: http://stackoverflow.com/questions/25136059/how-to-show-working-directory-in-r-prompt
  #
  base::getwd(...)
  DGPrompt()  # Get back in sync if setwd() is run
}


if (interactive())
{
  DGPrompt() # Init prompt
  cat("\n", format(Sys.Date(), format = "%d-%b-%Y"),
    " Rprofile.site: ", Sys.getenv("R_PROFILE"), " loaded...\n\n"
  )
}

